// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Query struct {
		EchoInt32                   func(childComplexity int, input Input) int
		EchoInt32In                 func(childComplexity int, n *int) int
		EchoInt64                   func(childComplexity int, input Input64) int
		EchoInt64In                 func(childComplexity int, n *int) int
		OverflowInt32               func(childComplexity int, sign Sign) int
		OverflowInt32ButReturnInt64 func(childComplexity int, sign Sign) int
	}

	Result struct {
		M func(childComplexity int) int
	}

	Result64 struct {
		N func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Query.echoInt32":
		if e.complexity.Query.EchoInt32 == nil {
			break
		}

		args, err := ec.field_Query_echoInt32_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EchoInt32(childComplexity, args["input"].(Input)), true

	case "Query.echoInt32In":
		if e.complexity.Query.EchoInt32In == nil {
			break
		}

		args, err := ec.field_Query_echoInt32In_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EchoInt32In(childComplexity, args["n"].(*int)), true

	case "Query.echoInt64":
		if e.complexity.Query.EchoInt64 == nil {
			break
		}

		args, err := ec.field_Query_echoInt64_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EchoInt64(childComplexity, args["input"].(Input64)), true

	case "Query.echoInt64In":
		if e.complexity.Query.EchoInt64In == nil {
			break
		}

		args, err := ec.field_Query_echoInt64In_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EchoInt64In(childComplexity, args["n"].(*int)), true

	case "Query.overflowInt32":
		if e.complexity.Query.OverflowInt32 == nil {
			break
		}

		args, err := ec.field_Query_overflowInt32_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OverflowInt32(childComplexity, args["sign"].(Sign)), true

	case "Query.overflowInt32ButReturnInt64":
		if e.complexity.Query.OverflowInt32ButReturnInt64 == nil {
			break
		}

		args, err := ec.field_Query_overflowInt32ButReturnInt64_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OverflowInt32ButReturnInt64(childComplexity, args["sign"].(Sign)), true

	case "Result.m":
		if e.complexity.Result.M == nil {
			break
		}

		return e.complexity.Result.M(childComplexity), true

	case "Result64.n":
		if e.complexity.Result64.N == nil {
			break
		}

		return e.complexity.Result64.N(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputInput,
		ec.unmarshalInputInput64,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphql", Input: `scalar Int64

enum Sign {
  POSITIVE
  NEGATIVE
}

input Input {
    n: Int
}

type Result {
    m: Int!
}

input Input64 {
    n: Int64
}

type Result64 {
    n: Int64!
}

type Query {
  overflowInt32ButReturnInt64(sign: Sign!): Int64
  overflowInt32(sign: Sign!): Int

  echoInt32In(n: Int): Int!
  echoInt64In(n: Int64): Int!
  echoInt32(input: Input!): Result
  echoInt64(input: Input64!): Result64
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
