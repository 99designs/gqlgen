{{ reserveImport "context"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "strings"  }}
{{ reserveImport "sync"  }}

{{ reserveImport "github.com/99designs/gqlgen/plugin/federation/fedruntime" }}

{{ .Imports }}

func (ec *executionContext) __resolve__service(ctx context.Context) (fedruntime.Service, error) {
	if ec.DisableIntrospection {
		return fedruntime.Service{}, errors.New("federated introspection disabled")
	}

	var sdl []string

	for _, src := range sources {
		if src.BuiltIn {
			continue
		}
		sdl = append(sdl, src.Input)
	}

	return fedruntime.Service{
		SDL: strings.Join(sdl, "\n"),
	}, nil
}

{{if .Entities}}
func (ec *executionContext) __resolve_entities(ctx context.Context, representations []map[string]interface{}) []fedruntime.Entity {
	list := make([]fedruntime.Entity, len(representations))
	resolveEntity := func(ctx context.Context, i int, rep map[string]interface{}) (err error) {
		// we need to do our own panic handling, because we may be called in a
		// goroutine, where the usual panic handling can't catch us
		defer func () {
			if r := recover(); r != nil {
				err = ec.Recover(ctx, r)
			}
		}()

		typeName, ok := rep["__typename"].(string)
		if !ok {
			return errors.New("__typename must be an existing string")
		}
		switch typeName {
		{{ range $_, $entity := .Entities }}
			{{- if .Resolvers -}}
			case "{{.Def.Name}}":
				{{range $i, $_ := .Resolvers -}}
					{{- if ne $i 0 -}}if entity == nil { {{- end -}}
						entity, err {{- if eq $i 0 -}}:{{- end -}}= func() (*{{$entity.Type}}, error) {
							{{- range $j, $keyField := .KeyFields -}}
								id{{$j}}, err := ec.{{.Type.UnmarshalFunc}}(ctx, rep["{{.Field.Join `"].(map[string]interface{})["`}}"])
								if err == nil {
							{{- end}}
							return ec.resolvers.Entity().{{.ResolverName | go}}(ctx, {{- range $j, $_ := .KeyFields -}} id{{$j}}, {{end}})
							{{- range .KeyFields -}}
								}
							{{- end}}
							return nil, nil
						}()
					{{ if ne $i 0 -}} } {{- end}}
				{{end}}
				if err != nil {
					return fmt.Errorf(`resolving Entity "{{.Def.Name}}": %w`, err)
				}
				if entity == nil {
					return errors.New(`unable to resolve Entity "{{.Def.Name}}"`)
				}
				{{ range .Requires }}
					entity.{{.Field.JoinGo `.`}}, err = ec.{{.Type.UnmarshalFunc}}(ctx, rep["{{.Name}}"])
					if err != nil {
						return err
					}
				{{ end }}
				list[i] = entity
				return nil
			{{ end }}
		{{ end }}
		default:
			return errors.New("unknown type: "+typeName)
		}
	}

	// if there are multiple entities to resolve, parallelize (similar to
	// graphql.FieldSet.Dispatch)
	switch len(representations) {
	case 0:
		return list
	case 1:
		err := resolveEntity(ctx, 0, representations[0])
		if err != nil {
			ec.Error(ctx, err)
		}
		return list
	default:
		var g sync.WaitGroup
		g.Add(len(representations))
		for i, rep := range representations {
			go func(i int, rep map[string]interface{}) {
				err := resolveEntity(ctx, i, rep)
				if err != nil {
					ec.Error(ctx, err)
				}
				g.Done()
			}(i, rep)
		}
		g.Wait()
		return list
	}
}
{{end}}
