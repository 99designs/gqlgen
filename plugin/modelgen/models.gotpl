{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}

{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}

{{- range $model := .Interfaces }}
	{{ with .Description }} {{.|prefixLines "// "}} {{ end }}
	type {{.Name|go }} interface {
		Is{{.Name|go }}()
	}
{{- end }}

{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}
	type {{ .Name|go }} struct {
		{{- range $field := .Fields }}
			{{- with .Description }}
				{{.|prefixLines "// "}}
			{{- end}}
			{{ $field.Name|go }} {{$field.Type | ref}} `{{$field.Tag}}`
		{{- end }}
	}

	{{- range $iface := .Implements }}
		func ({{ $model.Name|go }}) Is{{ $iface|go }}() {}
	{{- end }}
{{- end}}

{{ range $enum := .Enums }}
	{{ with .Description }} {{.|prefixLines "// "}} {{end}}
	type {{.Name|go }} {{if $enum.IntValues }}int{{else}}string{{end}}
	const (
	{{- range $index, $value := .Values}}
		{{- with .Description}}
			{{.|prefixLines "// "}}
		{{- end}}
		{{ $enum.Name|go }}{{ .Name|go }} {{$enum.Name|go }} = {{if $enum.IntValues }}{{$index}}{{else}}{{.Name|quote}}{{end}}
	{{- end }}
	)

	{{if $enum.IntValues }}
		var {{.Name|go }}Name = map[int]string{
			{{- range $index, $value := .Values}}
				{{$index}}: {{$value.Name|quote}},
			{{- end }}
		}

		var {{.Name|go }}Value = map[string]int{
			{{- range $index, $value := .Values}}
				{{$value.Name|quote}}: {{$index}},
			{{- end }}
		}
	{{else}}
		var All{{.Name|go }} = []{{ .Name|go }}{
		{{- range $value := .Values}}
			{{$enum.Name|go }}{{ .Name|go }},
		{{- end }}
		}
	{{end}}

	func (e {{.Name|go }}) IsValid() bool {
		switch e {
		case {{ range $index, $element := .Values}}{{if $index}},{{end}}{{ $enum.Name|go }}{{ $element.Name|go }}{{end}}:
			return true
		}
		return false
	}

	func (e {{.Name|go }}) String() string {
		{{ if $enum.IntValues -}}
			return {{.Name|go }}Name[int(e)]
		{{ else -}}
			return string(e)
		{{ end -}}
	}

	func (e *{{.Name|go }}) UnmarshalGQL(v interface{}) error {
		{{ if $enum.IntValues -}}
			value, ok := v.(int)
			if !ok {
				return fmt.Errorf("enums must be integers")
			}
		{{ else -}}
			value, ok := v.(string)
			if !ok {
				return fmt.Errorf("enums must be strings")
			}
		{{ end -}}

		*e = {{ .Name|go }}(value)
		if !e.IsValid() {
			return fmt.Errorf("%v is not a valid {{ .Name }}", value)
		}
		return nil
	}

	func (e {{.Name|go }}) MarshalGQL(w io.Writer) {
		{{ if $enum.IntValues -}}
			fmt.Fprint(w, e)
		{{ else -}}
			fmt.Fprint(w, strconv.Quote(e.String()))
		{{ end -}}
	}

{{- end }}
