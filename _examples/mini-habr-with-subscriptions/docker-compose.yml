services:
  redis1:
    image: redis:latest
    container_name: redis1
    ports: 
      - 6379:6379     
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD} 
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data1:/data
    networks:
      - ozon_habr_network
    env_file:
      - .env 
  
  redis2:
    image: redis:latest
    container_name: redis2
    ports: 
      - 6380:6379
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data2:/data
    networks:
      - ozon_habr_network
    env_file:
      - .env

  db:
    image: postgres:17
    container_name: ozon_habr_db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - ozon_habr_network
    env_file:
      - .env

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ozon_habr_app
    environment:
      REDIS_HOST1: redis1
      REDIS_PORT1: ${REDIS_PORT1}
      REDIS_HOST2: redis2
      REDIS_PORT2: ${REDIS_PORT2}
      REDIS_DB: ${REDIS_DB}
      TIMEOIUT: ${TIMEOUT}
      IDLE_TIMEOUT: ${IDLE_TIMEOUT}
      SERVER_PORT: ${SERVER_PORT}
      DB_PROTOCOL: ${DB_PROTOCOL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_OPTIONS: ${DB_OPTIONS}
    depends_on:
      db:
        condition: service_healthy
      redis1:
        condition: service_healthy
      redis2:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - ozon_habr_network
    env_file:
      - .env

  migrate:
    image: ghcr.io/kukymbr/goose-docker:latest
    container_name: ozon_habr_migrate
    environment:
      GOOSE_DRIVER: ${DB_PROTOCOL}
      GOOSE_DBSTRING: "host=${DB_HOST} port=${DB_PORT} user=${DB_USER} dbname=${DB_NAME} password=${DB_PASSWORD} ${DB_OPTIONS}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    networks:
      - ozon_habr_network
    env_file:
      - .env
volumes:
  redis_data1:
  redis_data2:
  db_data:
networks:
  ozon_habr_network:
    driver: bridge    