type Query {
    user(id: ID!): User
    search(input: SearchArgs = { location: "37,144", isBanned: false }): [User!]!
    userByTier(tier: Tier!, darkMode: DarkMode!): [User!]!
}

type User {
    id: ID!
    name: String!
    created: Timestamp
    modified: Timestamp
    valPrefs: DarkMode
    ptrPrefs: DarkMode
    isBanned: Banned!
    isLoginBanned: Boolean!
    isQueryBanned: Boolean!
    primitiveResolver: String!
    customResolver: Point!
    address: Address
    tier: Tier
    carManufacturer: String!
    children: Int!
    cars: Int!
    weddings: Int!
}

type Address {
    id: ID!
    location: Point
}

input SearchArgs {
    location: Point
    createdAfter: Timestamp
    isBanned: Banned # TODO: This can be a Boolean again once multiple backing types are allowed
}

enum Tier {
    A
    B
    C
}

scalar Timestamp
scalar Point
scalar Banned
scalar DarkMode
