// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package integration

import (
	bytes "bytes"
	context "context"
	remote_api "remote_api"
	strconv "strconv"
	sync "sync"

	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	models "github.com/99designs/gqlgen/integration/models-go"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Element() ElementResolver
	Query() QueryResolver
	User() UserResolver
}

type DirectiveRoot struct {
	Magic func(ctx context.Context, obj interface{}, next graphql.Resolver, kind *int) (res interface{}, err error)
}

type ComplexityRoot struct {
	Element struct {
		Child      func(childComplexity int) int
		Error      func(childComplexity int) int
		Mismatched func(childComplexity int) int
	}

	Query struct {
		Path         func(childComplexity int) int
		Date         func(childComplexity int, filter models.DateFilter) int
		Viewer       func(childComplexity int) int
		JsonEncoding func(childComplexity int) int
		Error        func(childComplexity int, typeArg *models.ErrorType) int
	}

	User struct {
		Name  func(childComplexity int) int
		Likes func(childComplexity int) int
	}

	Viewer struct {
		User func(childComplexity int) int
	}
}

type ElementResolver interface {
	Child(ctx context.Context, obj *models.Element) (models.Element, error)
	Error(ctx context.Context, obj *models.Element) (bool, error)
	Mismatched(ctx context.Context, obj *models.Element) ([]bool, error)
}
type QueryResolver interface {
	Path(ctx context.Context) ([]*models.Element, error)
	Date(ctx context.Context, filter models.DateFilter) (bool, error)
	Viewer(ctx context.Context) (*models.Viewer, error)
	JSONEncoding(ctx context.Context) (string, error)
	Error(ctx context.Context, typeArg *models.ErrorType) (bool, error)
}
type UserResolver interface {
	Likes(ctx context.Context, obj *remote_api.User) ([]string, error)
}

func field_Query_date_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 models.DateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		arg0, err = UnmarshalDateFilter(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil

}

func field_Query_error_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *models.ErrorType
	if tmp, ok := rawArgs["type"]; ok {
		var err error
		var ptr1 models.ErrorType
		if tmp != nil {
			err = (&ptr1).UnmarshalGQL(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil

}

func field_Query___type_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field___Type_fields_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

func field___Type_enumValues_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

func dir_magic_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["kind"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["kind"] = arg0
	return args, nil

}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	switch typeName + "." + field {

	case "Element.child":
		if e.complexity.Element.Child == nil {
			break
		}

		return e.complexity.Element.Child(childComplexity), true

	case "Element.error":
		if e.complexity.Element.Error == nil {
			break
		}

		return e.complexity.Element.Error(childComplexity), true

	case "Element.mismatched":
		if e.complexity.Element.Mismatched == nil {
			break
		}

		return e.complexity.Element.Mismatched(childComplexity), true

	case "Query.path":
		if e.complexity.Query.Path == nil {
			break
		}

		return e.complexity.Query.Path(childComplexity), true

	case "Query.date":
		if e.complexity.Query.Date == nil {
			break
		}

		args, err := field_Query_date_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Date(childComplexity, args["filter"].(models.DateFilter)), true

	case "Query.viewer":
		if e.complexity.Query.Viewer == nil {
			break
		}

		return e.complexity.Query.Viewer(childComplexity), true

	case "Query.jsonEncoding":
		if e.complexity.Query.JsonEncoding == nil {
			break
		}

		return e.complexity.Query.JsonEncoding(childComplexity), true

	case "Query.error":
		if e.complexity.Query.Error == nil {
			break
		}

		args, err := field_Query_error_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Error(childComplexity, args["type"].(*models.ErrorType)), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.likes":
		if e.complexity.User.Likes == nil {
			break
		}

		return e.complexity.User.Likes(childComplexity), true

	case "Viewer.user":
		if e.complexity.Viewer.User == nil {
			break
		}

		return e.complexity.Viewer.User(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	return graphql.ErrorResponse(ctx, "mutations are not supported")
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var elementImplementors = []string{"Element"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Element(ctx context.Context, sel ast.SelectionSet, obj *models.Element) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, elementImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Element")
		case "child":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Element_child(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "error":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Element_error(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "mismatched":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Element_mismatched(ctx, field, obj)
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Element_child(ctx context.Context, field graphql.CollectedField, obj *models.Element) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Element",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.resolvers.Element().Child(ctx, obj)
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(models.Element)

			return ec._Element(ctx, field.Selections, &res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) _Element_error(ctx context.Context, field graphql.CollectedField, obj *models.Element) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Element",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.resolvers.Element().Error(ctx, obj)
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(bool)
			return graphql.MarshalBoolean(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) _Element_mismatched(ctx context.Context, field graphql.CollectedField, obj *models.Element) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Element",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.resolvers.Element().Mismatched(ctx, obj)

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]bool)

			arr1 := make(graphql.Array, len(res))

			for idx1 := range res {
				arr1[idx1] = func() graphql.Marshaler {
					return graphql.MarshalBoolean(res[idx1])
				}()
			}

			return arr1
		}()
		return resTmp, err
	})
	return resMarshaler
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "path":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_path(ctx, field)
				wg.Done()
			}(i, field)
		case "date":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_date(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "viewer":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_viewer(ctx, field)
				wg.Done()
			}(i, field)
		case "jsonEncoding":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_jsonEncoding(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "error":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_error(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Query_path(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.resolvers.Query().Path(ctx)

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]*models.Element)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						if res[idx1] == nil {
							return graphql.Null
						}

						return ec._Element(ctx, field.Selections, res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) _Query_date(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_date_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.resolvers.Query().Date(ctx, args["filter"].(models.DateFilter))
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(bool)
			return graphql.MarshalBoolean(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) _Query_viewer(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.resolvers.Query().Viewer(ctx)

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*models.Viewer)

			if res == nil {
				return graphql.Null
			}

			return ec._Viewer(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) _Query_jsonEncoding(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.resolvers.Query().JSONEncoding(ctx)
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) _Query_error(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_error_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.resolvers.Query().Error(ctx, args["type"].(*models.ErrorType))
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(bool)
			return graphql.MarshalBoolean(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query___type_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.introspectType(args["name"].(string)), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*introspection.Type)

			if res == nil {
				return graphql.Null
			}

			return ec.___Type(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.introspectSchema(), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*introspection.Schema)

			if res == nil {
				return graphql.Null
			}

			return ec.___Schema(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

var userImplementors = []string{"User"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *remote_api.User) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, userImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "likes":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._User_likes(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *remote_api.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Name, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) _User_likes(ctx context.Context, field graphql.CollectedField, obj *remote_api.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = ec.resolvers.User().Likes(ctx, obj)
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]string)

			arr1 := make(graphql.Array, len(res))

			for idx1 := range res {
				arr1[idx1] = func() graphql.Marshaler {
					return graphql.MarshalString(res[idx1])
				}()
			}

			return arr1
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

var viewerImplementors = []string{"Viewer"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Viewer(ctx context.Context, sel ast.SelectionSet, obj *models.Viewer) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, viewerImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Viewer")
		case "user":
			out.Values[i] = ec._Viewer_user(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Viewer_user(ctx context.Context, field graphql.CollectedField, obj *models.Viewer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Viewer",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.User, nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*remote_api.User)

			if res == nil {
				return graphql.Null
			}

			return ec._User(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Name, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Description, nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Locations, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]string)

			arr1 := make(graphql.Array, len(res))

			for idx1 := range res {
				arr1[idx1] = func() graphql.Marshaler {
					return graphql.MarshalString(res[idx1])
				}()
			}

			return arr1
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Args, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]introspection.InputValue)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: &res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						return ec.___InputValue(ctx, field.Selections, &res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Name, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Description, nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.IsDeprecated, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(bool)
			return graphql.MarshalBoolean(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.DeprecationReason, nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Name, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Description, nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Args, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]introspection.InputValue)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: &res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						return ec.___InputValue(ctx, field.Selections, &res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Type, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*introspection.Type)

			if res == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
				return graphql.Null
			}

			return ec.___Type(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.IsDeprecated, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(bool)
			return graphql.MarshalBoolean(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.DeprecationReason, nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Name, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Description, nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Type, nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*introspection.Type)

			if res == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
				return graphql.Null
			}

			return ec.___Type(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.DefaultValue, nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*string)

			if res == nil {
				return graphql.Null
			}
			return graphql.MarshalString(*res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Types(), nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]introspection.Type)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: &res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						return ec.___Type(ctx, field.Selections, &res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.QueryType(), nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*introspection.Type)

			if res == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
				return graphql.Null
			}

			return ec.___Type(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.MutationType(), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*introspection.Type)

			if res == nil {
				return graphql.Null
			}

			return ec.___Type(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.SubscriptionType(), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*introspection.Type)

			if res == nil {
				return graphql.Null
			}

			return ec.___Type(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Directives(), nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]introspection.Directive)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: &res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						return ec.___Directive(ctx, field.Selections, &res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Kind(), nil
		if resTmp == nil {
			return resTmp, nil
		}

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Name(), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*string)

			if res == nil {
				return graphql.Null
			}
			return graphql.MarshalString(*res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Description(), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(string)
			return graphql.MarshalString(res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_fields_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Fields(args["includeDeprecated"].(bool)), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]introspection.Field)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: &res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						return ec.___Field(ctx, field.Selections, &res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.Interfaces(), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]introspection.Type)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: &res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						return ec.___Type(ctx, field.Selections, &res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.PossibleTypes(), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]introspection.Type)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: &res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						return ec.___Type(ctx, field.Selections, &res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_enumValues_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.EnumValues(args["includeDeprecated"].(bool)), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]introspection.EnumValue)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: &res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						return ec.___EnumValue(ctx, field.Selections, &res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.InputFields(), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.([]introspection.InputValue)

			arr1 := make(graphql.Array, len(res))
			var wg sync.WaitGroup

			isLen1 := len(res) == 1
			if !isLen1 {
				wg.Add(len(res))
			}

			for idx1 := range res {
				idx1 := idx1
				rctx := &graphql.ResolverContext{
					Index:  &idx1,
					Result: &res[idx1],
				}
				ctx := graphql.WithResolverContext(ctx, rctx)
				f := func(idx1 int) {
					if !isLen1 {
						defer wg.Done()
					}
					arr1[idx1] = func() graphql.Marshaler {

						return ec.___InputValue(ctx, field.Selections, &res[idx1])
					}()
				}
				if isLen1 {
					f(idx1)
				} else {
					go f(idx1)
				}

			}
			wg.Wait()
			return arr1
		}()
		return resTmp, err
	})
	return resMarshaler
}

// nolint: vetshadow
func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	var resMarshaler graphql.Marshaler = graphql.Null
	ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		var resTmp interface{}
		var err error
		resTmp, err = obj.OfType(), nil

		rctx.Result = resTmp
		resMarshaler = func() graphql.Marshaler {
			if resTmp == nil {
				return graphql.Null
			}
			res := resTmp.(*introspection.Type)

			if res == nil {
				return graphql.Null
			}

			return ec.___Type(ctx, field.Selections, res)
		}()
		return resTmp, err
	})
	return resMarshaler
}

func UnmarshalDateFilter(v interface{}) (models.DateFilter, error) {
	var it models.DateFilter
	var asMap = v.(map[string]interface{})

	if _, present := asMap["timezone"]; !present {
		asMap["timezone"] = "UTC"
	}
	if _, present := asMap["op"]; !present {
		asMap["op"] = "EQ"
	}

	for k, v := range asMap {
		switch k {
		case "value":
			var err error
			it.Value, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "timezone":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Timezone = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "op":
			var err error
			var ptr1 models.DateFilterOp
			if v != nil {
				err = (&ptr1).UnmarshalGQL(v)
				it.Op = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	rctx := graphql.GetResolverContext(ctx)
	for _, d := range rctx.Field.Definition.Directives {
		switch d.Name {
		case "magic":
			if ec.directives.Magic != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := dir_magic_args(rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Magic(ctx, obj, n, args["kind"].(*int))
				}
			}
		}
	}
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema.graphql", Input: `"This directive does magical things"
directive @magic(kind: Int) on FIELD_DEFINITION

type Element {
    child: Element!
    error: Boolean!
    mismatched: [Boolean!]
}

enum DATE_FILTER_OP {
    # multi
    # line
    # comment
    EQ
    NEQ
    GT
    GTE
    LT
    LTE
}

input DateFilter {
    value: String!
    timezone: String = "UTC"
    op: DATE_FILTER_OP = EQ
}

type User {
    name: String!
    likes: [String!]!
}

type Viewer {
    user: User
}

type Query {
    path: [Element]
    date(filter: DateFilter!): Boolean!
    viewer: Viewer
    jsonEncoding: String!
    error(type: ErrorType = NORMAL): Boolean!
}

enum ErrorType {
    CUSTOM
    NORMAL
}

# this is a comment with a ` + "`" + `backtick` + "`" + `
`},
)
