// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package out_covariant_types

type Identifiable interface {
	IsIdentifiable()
	GetID() string
}

type Node interface {
	IsIdentifiable()
	IsTypeable()
	IsNode()
	GetID() string
	GetType() string
	GetData() NodeData
}

type NodeData interface {
	IsNodeData()
	GetName() string
	GetChildrenIds() []string
}

type Tags interface {
	IsTags()
	GetData() []string
}

type Typeable interface {
	IsTypeable()
	GetType() string
}

type BaseIdentifiable struct {
	ID string `json:"id"`
}

func (BaseIdentifiable) IsIdentifiable()    {}
func (this BaseIdentifiable) GetID() string { return this.ID }

type BaseNode struct {
	BaseIdentifiable
	BaseTypeable
	Data NodeData `json:"data"`
}

func (BaseNode) IsNode()                {}
func (this BaseNode) GetID() string     { return this.ID }
func (this BaseNode) GetType() string   { return this.Type }
func (this BaseNode) GetData() NodeData { return this.Data }

func (BaseNode) IsIdentifiable() {}

func (BaseNode) IsTypeable() {}

type BaseNodeData struct {
	Name        string   `json:"name"`
	ChildrenIds []string `json:"childrenIds"`
}

func (BaseNodeData) IsNodeData()          {}
func (this BaseNodeData) GetName() string { return this.Name }
func (this BaseNodeData) GetChildrenIds() []string {
	if this.ChildrenIds == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.ChildrenIds))
	for _, concrete := range this.ChildrenIds {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type BaseTags struct {
	Data []string `json:"data,omitempty"`
}

func (BaseTags) IsTags() {}
func (this BaseTags) GetData() []string {
	if this.Data == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Data))
	for _, concrete := range this.Data {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type BaseTypeable struct {
	Type string `json:"type"`
}

func (BaseTypeable) IsTypeable()          {}
func (this BaseTypeable) GetType() string { return this.Type }

type ExtendedProductNode struct {
	ID   string           `json:"id"`
	Type string           `json:"type"`
	Data *ProductNodeData `json:"data"`
	Tags *ProductTags     `json:"tags,omitempty"`
}

func (ExtendedProductNode) IsNode()                {}
func (this ExtendedProductNode) GetID() string     { return this.ID }
func (this ExtendedProductNode) GetType() string   { return this.Type }
func (this ExtendedProductNode) GetData() NodeData { return *this.Data }

func (ExtendedProductNode) IsIdentifiable() {}

func (ExtendedProductNode) IsTypeable() {}

type ProductNode struct {
	ID           string           `json:"id"`
	Type         string           `json:"type"`
	Data         *ProductNodeData `json:"data"`
	ProductTitle string           `json:"productTitle"`
}

func (ProductNode) IsNode()                {}
func (this ProductNode) GetID() string     { return this.ID }
func (this ProductNode) GetType() string   { return this.Type }
func (this ProductNode) GetData() NodeData { return *this.Data }

func (ProductNode) IsIdentifiable() {}

func (ProductNode) IsTypeable() {}

type ProductNodeData struct {
	BaseNodeData
	ProductSpecificField string `json:"productSpecificField"`
}

func (ProductNodeData) IsNodeData()          {}
func (this ProductNodeData) GetName() string { return this.Name }
func (this ProductNodeData) GetChildrenIds() []string {
	if this.ChildrenIds == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.ChildrenIds))
	for _, concrete := range this.ChildrenIds {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type ProductTags struct {
	BaseTags
	ProductSpecific *bool `json:"productSpecific,omitempty"`
}

func (ProductTags) IsTags() {}
func (this ProductTags) GetData() []string {
	if this.Data == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Data))
	for _, concrete := range this.Data {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type Query struct {
}
