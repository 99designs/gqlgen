type Query {
    invalidIdentifier: InvalidIdentifier
    collision: It
    mapInput(input: Changes): Boolean
    recursive(input: RecursiveInputSlice): Boolean
    nestedInputs(input: [[OuterInput]] = [[{inner: {id: 1}}]]): Boolean
    nestedOutputs: [[OuterObject]]
    shapes: [Shape]
    errorBubble: Error
    modelMethods: ModelMethods
    valid: String!
    user(id: Int!): User!
    nullableArg(arg: Int = 123): String
    directiveArg(arg: String! @length(min:1, max: 255, message: "invalid length")): String
    directiveNullableArg(arg: Int @range(min:0), arg2: Int @range): String
    directiveInputNullable(arg: InputDirectives): String
    directiveInput(arg: InputDirectives!): String
    directiveInputType(arg: InnerInput! @custom): String
    directiveInputEnum(arg: InnerInput! @permissions(roles: ADMIN)): String
    directiveInputEnumSlice(arg: InnerInput! @permissionsSlice(roles: [ADMIN])): String
    inputSlice(arg: [String!]!): Boolean!
    shapeUnion: ShapeUnion!
    autobind: Autobind
    deprecatedField: String! @deprecated(reason: "test deprecated directive")
}

type Subscription {
    updated: String!
    initPayload: String!
}

type User {
    id: Int!
    friends: [User!]!
    created: Time!
    updated: Time
}

type Autobind {
    int: Int!
    int32: Int!
    int64: Int!

    idStr: ID!
    idInt: ID!
}

type Error {
    id: ID!
    errorOnNonRequiredField: String
    errorOnRequiredField: String!
    nilOnRequiredField: String!
}

type ModelMethods {
    resolverField: Boolean!
    noContext: Boolean!
    withContext: Boolean!
}

type InvalidIdentifier {
    id: Int!
}

type It {
    id: ID!
}

input Changes {
    a: Int
    b: Int
}

input RecursiveInputSlice {
    self: [RecursiveInputSlice!]
}

input InnerInput {
    id:Int!
}

input OuterInput {
    inner: InnerInput!
}

scalar ThirdParty

input InputDirectives {
    text: String! @length(min: 0, max: 7, message: "not valid")
    inner: InnerDirectives!
    innerNullable: InnerDirectives
    thirdParty: ThirdParty @length(min: 0, max: 7, message: "not valid")
}

input InnerDirectives {
    message: String! @length(min: 1, message: "not valid")
}

type OuterObject {
    inner: InnerObject!
}

type InnerObject {
    id: Int!
}

interface Shape {
    area: Float
}
type Circle implements Shape {
    radius: Float
    area: Float
}
type Rectangle implements Shape {
    length: Float
    width: Float
    area: Float
}
union ShapeUnion = Circle | Rectangle

type ForcedResolver {
    field: Circle
}

type EmbeddedPointer {
    ID: String
    Title: String
}

directive @length(min: Int!, max: Int) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
directive @range(min: Int = 0, max: Int) on ARGUMENT_DEFINITION
directive @custom on ARGUMENT_DEFINITION
directive @permissionsSlice(roles: [Role!]!) on ARGUMENT_DEFINITION
directive @permissions(roles: Role!) on ARGUMENT_DEFINITION

enum Status {
    OK
    ERROR
}

enum Role {
    ADMIN
    USER
}

scalar Time
