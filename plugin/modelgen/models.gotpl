{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}

{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}

{{- if not $.Config.GenerateEmbeddedStructsForInterfaces }}
	{{- range $interface := .Interfaces }}
		{{ with .Description }} {{.|prefixLines "// "}} {{ end }}
		type {{.Name|go }} interface {
			{{- range $impl := .Implements }}
				{{ $impl|go }}
			{{- end }}
			Is{{.Name|go }}()
		}
	{{- end }}
{{- end }}

{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}
	type {{ .Name|go }} struct {
		{{- range $impl := $model.Implements }}
			{{ $impl|go }}
		{{- end}}
		{{- range $field := .Fields }}
            {{- /*	If we are generating embedded structs for GraphQL interfaces,
		 		we need to determine which of the struct's fields are for the purpose of implementing an interface
		 		and ignore those in favor of simply embedding the interface's struct */ -}}
            {{- $found := false }}
			{{- if and $.Config.GenerateEmbeddedStructsForInterfaces $model.Implements}}
				{{- range $impl := $model.Implements }}
					{{- range $interface := $.Interfaces }}
						{{- if eq $impl $interface.Name }}
							{{- range $interfaceField := $interface.Fields }}
								{{- if eq $interfaceField.Name $field.Name }}
									{{- $found = true }}
									{{- break}}
                                {{- end }}
							{{- end }}
						{{- end }}

						{{- if $found }}
							{{- break}}
						{{- end }}
					{{- end }}

					{{- if $found }}
                        {{- break}}
					{{- end }}
				{{- end }}
			{{- end }}
			{{- if not $found }}
				{{- with .Description }}
					{{.|prefixLines "// "}}
				{{- end}}
				{{ $field.Name|go }}  {{$field.Type | ref}} `{{$field.Tag}}`
			{{- end}}
		{{- end }}
	}

	{{- if not $.Config.GenerateEmbeddedStructsForInterfaces }}
		{{- range $iface := .Implements }}
			func ({{ $model.Name|go }}) Is{{ $iface|go }}() {}
		{{- end }}
	{{- end }}
{{- end}}

{{ range $enum := .Enums }}
	{{ with .Description }} {{.|prefixLines "// "}} {{end}}
	type {{.Name|go }} string
	const (
	{{- range $value := .Values}}
		{{- with .Description}}
			{{.|prefixLines "// "}}
		{{- end}}
		{{ $enum.Name|go }}{{ .Name|go }} {{$enum.Name|go }} = {{.Name|quote}}
	{{- end }}
	)

	var All{{.Name|go }} = []{{ .Name|go }}{
	{{- range $value := .Values}}
		{{$enum.Name|go }}{{ .Name|go }},
	{{- end }}
	}

	func (e {{.Name|go }}) IsValid() bool {
		switch e {
		case {{ range $index, $element := .Values}}{{if $index}},{{end}}{{ $enum.Name|go }}{{ $element.Name|go }}{{end}}:
			return true
		}
		return false
	}

	func (e {{.Name|go }}) String() string {
		return string(e)
	}

	func (e *{{.Name|go }}) UnmarshalGQL(v interface{}) error {
		str, ok := v.(string)
		if !ok {
			return fmt.Errorf("enums must be strings")
		}

		*e = {{ .Name|go }}(str)
		if !e.IsValid() {
			return fmt.Errorf("%s is not a valid {{ .Name }}", str)
		}
		return nil
	}

	func (e {{.Name|go }}) MarshalGQL(w io.Writer) {
		fmt.Fprint(w, strconv.Quote(e.String()))
	}

{{- end }}
