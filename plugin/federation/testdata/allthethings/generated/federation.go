// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"sync"

	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	"github.com/99designs/gqlgen/plugin/federation/testdata/allthethings/model"
)

func (ec *executionContext) __resolve__service(ctx context.Context) (fedruntime.Service, error) {
	if ec.DisableIntrospection {
		return fedruntime.Service{}, errors.New("federated introspection disabled")
	}

	var sdl []string

	for _, src := range sources {
		if src.BuiltIn {
			continue
		}
		sdl = append(sdl, src.Input)
	}

	return fedruntime.Service{
		SDL: strings.Join(sdl, "\n"),
	}, nil
}

func (ec *executionContext) __resolve_entities(ctx context.Context, representations []map[string]interface{}) []fedruntime.Entity {
	list := make([]fedruntime.Entity, len(representations))

	repsMap := map[string]struct {
		i []int
		r []map[string]interface{}
	}{}

	// We group entities by typename so that we can parallelize their resolution.
	// This is particularly helpful when there are entity groups in multi mode.
	buildRepresentationGroups := func(reps []map[string]interface{}) {
		for i, rep := range reps {
			typeName, ok := rep["__typename"].(string)
			if !ok {
				// If there is no __typename, we just skip the representation;
				// we just won't be resolving these unknown types.
				ec.Error(ctx, errors.New("__typename must be an existing string"))
				continue
			}

			_r := repsMap[typeName]
			_r.i = append(_r.i, i)
			_r.r = append(_r.r, rep)
			repsMap[typeName] = _r
		}
	}

	isMulti := func(typeName string) bool {
		switch typeName {
		default:
			return false
		}
	}

	resolveEntity := func(ctx context.Context, typeName string, rep map[string]interface{}, idx []int, i int) (err error) {
		// we need to do our own panic handling, because we may be called in a
		// goroutine, where the usual panic handling can't catch us
		defer func() {
			if r := recover(); r != nil {
				err = ec.Recover(ctx, r)
			}
		}()

		switch typeName {
		case "ExternalExtension":
			entity, err := func() (*model.ExternalExtension, error) {
				id0, err := ec.unmarshalNString2string(ctx, rep["upc"])
				if err == nil {
					return ec.resolvers.Entity().FindExternalExtensionByUpc(ctx, id0)
				}
				return nil, nil
			}()

			if err != nil {
				return fmt.Errorf(`resolving Entity "ExternalExtension": %w`, err)
			}
			if entity == nil {
				return errors.New(`unable to resolve Entity "ExternalExtension"`)
			}

			list[idx[i]] = entity
			return nil

		case "Hello":
			entity, err := func() (*model.Hello, error) {
				id0, err := ec.unmarshalNString2string(ctx, rep["name"])
				if err == nil {
					return ec.resolvers.Entity().FindHelloByName(ctx, id0)
				}
				return nil, nil
			}()

			if err != nil {
				return fmt.Errorf(`resolving Entity "Hello": %w`, err)
			}
			if entity == nil {
				return errors.New(`unable to resolve Entity "Hello"`)
			}

			list[idx[i]] = entity
			return nil

		case "NestedKey":
			entity, err := func() (*model.NestedKey, error) {
				id0, err := ec.unmarshalNString2string(ctx, rep["id"])
				if err == nil {
					id1, err := ec.unmarshalNString2string(ctx, rep["hello"].(map[string]interface{})["name"])
					if err == nil {
						return ec.resolvers.Entity().FindNestedKeyByIDAndHelloName(ctx, id0, id1)
					}
				}
				return nil, nil
			}()

			if err != nil {
				return fmt.Errorf(`resolving Entity "NestedKey": %w`, err)
			}
			if entity == nil {
				return errors.New(`unable to resolve Entity "NestedKey"`)
			}

			list[idx[i]] = entity
			return nil

		case "VeryNestedKey":
			entity, err := func() (*model.VeryNestedKey, error) {
				id0, err := ec.unmarshalNString2string(ctx, rep["id"])
				if err == nil {
					id1, err := ec.unmarshalNString2string(ctx, rep["hello"].(map[string]interface{})["name"])
					if err == nil {
						id2, err := ec.unmarshalNString2string(ctx, rep["world"].(map[string]interface{})["foo"])
						if err == nil {
							id3, err := ec.unmarshalNInt2int(ctx, rep["world"].(map[string]interface{})["bar"])
							if err == nil {
								id4, err := ec.unmarshalNString2string(ctx, rep["more"].(map[string]interface{})["world"].(map[string]interface{})["foo"])
								if err == nil {
									return ec.resolvers.Entity().FindVeryNestedKeyByIDAndHelloNameAndWorldFooAndWorldBarAndMoreWorldFoo(ctx, id0, id1, id2, id3, id4)
								}
							}
						}
					}
				}
				return nil, nil
			}()

			if err != nil {
				return fmt.Errorf(`resolving Entity "VeryNestedKey": %w`, err)
			}
			if entity == nil {
				return errors.New(`unable to resolve Entity "VeryNestedKey"`)
			}

			entity.ID, err = ec.unmarshalNString2string(ctx, rep["id"])
			if err != nil {
				return err
			}

			entity.Hello.Secondary, err = ec.unmarshalNString2string(ctx, rep["hello"].(map[string]interface{})["secondary"])
			if err != nil {
				return err
			}

			list[idx[i]] = entity
			return nil

		case "World":
			entity, err := func() (*model.World, error) {
				id0, err := ec.unmarshalNString2string(ctx, rep["foo"])
				if err == nil {
					return ec.resolvers.Entity().FindWorldByFoo(ctx, id0)
				}
				return nil, nil
			}()

			if entity == nil {
				entity, err = func() (*model.World, error) {
					id0, err := ec.unmarshalNInt2int(ctx, rep["bar"])
					if err == nil {
						return ec.resolvers.Entity().FindWorldByBar(ctx, id0)
					}
					return nil, nil
				}()
			}

			if err != nil {
				return fmt.Errorf(`resolving Entity "World": %w`, err)
			}
			if entity == nil {
				return errors.New(`unable to resolve Entity "World"`)
			}

			list[idx[i]] = entity
			return nil

		default:
			return errors.New("unknown type: " + typeName)
		}
	}

	resolveManyEntities := func(ctx context.Context, typeName string, reps []map[string]interface{}, idx []int) (err error) {
		// we need to do our own panic handling, because we may be called in a
		// goroutine, where the usual panic handling can't catch us
		defer func() {
			if r := recover(); r != nil {
				err = ec.Recover(ctx, r)
			}
		}()

		switch typeName {

		default:
			return errors.New("unknown type: " + typeName)
		}
	}

	resolveEntityGroup := func(typeName string, reps []map[string]interface{}, idx []int) {
		if isMulti(typeName) {
			err := resolveManyEntities(ctx, typeName, reps, idx)
			if err != nil {
				ec.Error(ctx, err)
			}
		} else {
			// if there are multiple entities to resolve, parallelize (similar to
			// graphql.FieldSet.Dispatch)
			var e sync.WaitGroup
			e.Add(len(reps))
			for i, rep := range reps {
				i, rep := i, rep
				go func(i int, rep map[string]interface{}) {
					err := resolveEntity(ctx, typeName, rep, idx, i)
					if err != nil {
						ec.Error(ctx, err)
					}
					e.Done()
				}(i, rep)
			}
			e.Wait()
		}
	}
	buildRepresentationGroups(representations)

	switch len(repsMap) {
	case 0:
		return list
	case 1:
		for typeName, reps := range repsMap {
			resolveEntityGroup(typeName, reps.r, reps.i)
		}
		return list
	default:
		var g sync.WaitGroup
		g.Add(len(repsMap))
		for typeName, reps := range repsMap {
			go func(typeName string, reps []map[string]interface{}, idx []int) {
				resolveEntityGroup(typeName, reps, idx)
				g.Done()
			}(typeName, reps.r, reps.i)
		}
		g.Wait()
		return list
	}
}
