// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"sync"

	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
)

func (ec *executionContext) __resolve__service(ctx context.Context) (fedruntime.Service, error) {
	if ec.DisableIntrospection {
		return fedruntime.Service{}, errors.New("federated introspection disabled")
	}

	var sdl []string

	for _, src := range sources {
		if src.BuiltIn {
			continue
		}
		sdl = append(sdl, src.Input)
	}

	return fedruntime.Service{
		SDL: strings.Join(sdl, "\n"),
	}, nil
}

func (ec *executionContext) __resolve_entities(ctx context.Context, representations []map[string]interface{}) []fedruntime.Entity {
	list := make([]fedruntime.Entity, len(representations))
	resolveEntity := func(ctx context.Context, i int, rep map[string]interface{}) (err error) {
		// we need to do our own panic handling, because we may be called in a
		// goroutine, where the usual panic handling can't catch us
		defer func() {
			if r := recover(); r != nil {
				err = ec.Recover(ctx, r)
			}
		}()

		typeName, ok := rep["__typename"].(string)
		if !ok {
			return errors.New("__typename must be an existing string")
		}
		switch typeName {

		case "Hello":
			id0, err := ec.unmarshalNString2string(ctx, rep["name"])
			if err != nil {
				return errors.New(fmt.Sprintf("Field %s undefined in schema.", "name"))
			}

			entity, err := ec.resolvers.Entity().FindHelloByName(ctx,
				id0)
			if err != nil {
				return err
			}

			list[i] = entity
			return nil

		case "HelloWithErrors":
			id0, err := ec.unmarshalNString2string(ctx, rep["name"])
			if err != nil {
				return errors.New(fmt.Sprintf("Field %s undefined in schema.", "name"))
			}

			entity, err := ec.resolvers.Entity().FindHelloWithErrorsByName(ctx,
				id0)
			if err != nil {
				return err
			}

			list[i] = entity
			return nil

		case "PlanetRequires":
			id0, err := ec.unmarshalNString2string(ctx, rep["name"])
			if err != nil {
				return errors.New(fmt.Sprintf("Field %s undefined in schema.", "name"))
			}

			entity, err := ec.resolvers.Entity().FindPlanetRequiresByName(ctx,
				id0)
			if err != nil {
				return err
			}

			entity.Diameter, err = ec.unmarshalNInt2int(ctx, rep["diameter"])
			if err != nil {
				return err
			}

			list[i] = entity
			return nil

		case "World":
			id0, err := ec.unmarshalNString2string(ctx, rep["hello"].(map[string]interface{})["name"])
			if err != nil {
				return errors.New(fmt.Sprintf("Field %s undefined in schema.", "helloName"))
			}
			id1, err := ec.unmarshalNString2string(ctx, rep["foo"])
			if err != nil {
				return errors.New(fmt.Sprintf("Field %s undefined in schema.", "foo"))
			}

			entity, err := ec.resolvers.Entity().FindWorldByHelloNameAndFoo(ctx,
				id0, id1)
			if err != nil {
				return err
			}

			list[i] = entity
			return nil

		case "WorldName":
			id0, err := ec.unmarshalNString2string(ctx, rep["name"])
			if err != nil {
				return errors.New(fmt.Sprintf("Field %s undefined in schema.", "name"))
			}

			entity, err := ec.resolvers.Entity().FindWorldNameByName(ctx,
				id0)
			if err != nil {
				return err
			}

			list[i] = entity
			return nil

		default:
			return errors.New("unknown type: " + typeName)
		}
	}

	// if there are multiple entities to resolve, parallelize (similar to
	// graphql.FieldSet.Dispatch)
	switch len(representations) {
	case 0:
		return list
	case 1:
		err := resolveEntity(ctx, 0, representations[0])
		if err != nil {
			ec.Error(ctx, err)
		}
		return list
	default:
		var g sync.WaitGroup
		g.Add(len(representations))
		for i, rep := range representations {
			go func(i int, rep map[string]interface{}) {
				err := resolveEntity(ctx, i, rep)
				if err != nil {
					ec.Error(ctx, err)
				}
				g.Done()
			}(i, rep)
		}
		g.Wait()
		return list
	}
}
